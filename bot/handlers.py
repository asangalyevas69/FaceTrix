import requests
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

router = Router()
user_roles = {} 


@router.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FaceTrix!\n\n" \
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard
    )


@router.message(F.text.in_(["–ù–∞—á–∞—Ç—å", "–º–µ–Ω—é", "–ú–µ–Ω—é"]))
async def show_main_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
        [InlineKeyboardButton(text="üßë‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_curator")],
        [InlineKeyboardButton(text="üéì –£—á–µ–Ω–∏–∫", callback_data="role_student")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb)

@router.callback_query(F.data.startswith("role_"))
async def show_role_actions(callback: CallbackQuery):
    role = callback.data.split("_")[1]
    user_roles[callback.from_user.id] = role 

    await callback.message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω-–∫–æ–¥:\n" \
    "–ü—Ä–∏–º–µ—Ä: `/login 123456`", parse_mode="Markdown")
    await callback.answer()

@router.message(Command("login"))
async def login_user(message: Message):
    login_code = message.text.split()[1]
    role = user_roles.get(message.from_user.id)

    if role == "parent":
        url = f"http://127.0.0.1:8000/api/parenttg/{login_code}/"
    elif role == "student":
        url = f"http://127.0.0.1:8000/api/studenttg/{login_code}/"
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –≤ –º–µ–Ω—é!!!")
        return
    

    response = requests.get(url)
    try:
            data = response.json()
    except Exception:
            await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å login_code.")
            return


    report_text = (
        f"üìä –û—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É: {data.get('student')}\n"
        f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {data.get('present')} –¥–Ω–µ–π\n"
        f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {data.get('absent')} –¥–Ω–µ–π\n"
        f"üìÜ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {data.get('total')}"
    )

    await message.answer()


@router.callback_query(F.data.startswith("role_"))
async def show_role_actions(callback: CallbackQuery):
    role = callback.data.split("_")[1]

    if role == "parent":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", callback_data="parent_report")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º", callback_data="parent_contact")],
            [InlineKeyboardButton(text="üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="parent_schedule")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    elif role == "curator":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É—á–µ–Ω–∏–∫–æ–≤", callback_data="curator_check")],
            [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º", callback_data="curator_msg")],
            [InlineKeyboardButton(text="üìà –û—Ç—á—ë—Ç—ã –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", callback_data="curator_reports")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    elif role == "student":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ú–æ—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", callback_data="student_attendance")],
            [InlineKeyboardButton(text="üÜò –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å", callback_data="student_help")],
            [InlineKeyboardButton(text="üìö –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role.capitalize()}. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=kb
    )
    await callback.answer()


# @router.callback_query(F.data == "main_menu")
# async def go_main_menu(callback: CallbackQuery):
#     kb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
#         [InlineKeyboardButton(text="üßë‚Äçüè´ –ö—É—Ä–∞—Ç–æ—Ä", callback_data="role_curator")],
#         [InlineKeyboardButton(text="üéì –£—á–µ–Ω–∏–∫", callback_data="role_student")]
#     ])
#     await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb)
#     await callback.answer()



@router.callback_query(F.data == "parent_report")
async def show_parent_report(callback: CallbackQuery):
    login_code = callback.from_user.id
    url = f"http://127.0.0.1:8000/api/parenttg/{login_code}/"
    
    response = requests.get(url)
    
    if response.status_code == 200:

        data = response.json()
        report_text = (
            f"üìä –û—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É: {data.get('student')}\n"
            f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {data.get('present')} –¥–Ω–µ–π\n"
            f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {data.get('absent')} –¥–Ω–µ–π\n"
            f"üìÜ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {data.get('total')}"
        )
    else:
        print("üî¥ –û—Ç–≤–µ—Ç –æ—Ç Django:", response.text) 
        report_text = (
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ({response.status_code})\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ –∫–æ–Ω—Å–æ–ª–∏"
        )

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: Telegram –ª–∏–º–∏—Ç = 4096 —Å–∏–º–≤–æ–ª–æ–≤
    if len(report_text) > 4090:
        report_text = report_text[:4090] + "..."

    await callback.message.answer(report_text)
    await callback.answer()




@router.callback_query(F.data == "student_attendance")
async def show_student_report(callback: CallbackQuery):
    login_code = callback.from_user.id
    response = requests.get(f"http://127.0.0.1:8000/api/get-student-by-tg/{login_code}/")
    print("–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:", response.text)

    data = response.json()

    report_text = (
        f"üìÖ –¢–≤–æ—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:\n"
        f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {data.get('present')} –¥–Ω–µ–π\n"
        f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {data.get('absent')} –¥–Ω–µ–π\n"
        f"üìÜ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {data.get('total')}"
    )

    await callback.message.answer(report_text)
    await callback.answer()


@router.callback_query(F.data.in_([
    "parent_contact", "parent_schedule",
    "curator_check", "curator_msg", "curator_reports",
    "student_help", "student_schedule"
]))
async def action_stub(callback: CallbackQuery):
    actions = {
        "parent_contact": "–°–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º",
        "parent_schedule": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞",
        "curator_check": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏",
        "curator_msg": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤",
        "curator_reports": "–û—Ç—á—ë—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º",
        "student_help": "–ü–æ–º–æ—â—å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞",
        "student_schedule": "–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    }
    await callback.message.answer(f"{actions[callback.data]} ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ")
    await callback.answer()

