"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
from ultralytics import YOLO
from deepface import DeepFace
import cv2
import os
import numpy as np
from scipy.spatial.distance import cosine
import requests

"URL –Ω–∞—à–µ–≥–æ Django API, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ"
API_URL = "http://127.0.0.1:8000/api/attendance/"

"–ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∞—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
KNOWN_FACES_DIR = "students"
known_embeddings = {}

"–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—á–∏—Ç–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏"
print("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")

for filename in os.listdir(KNOWN_FACES_DIR):
    if filename.endswith((".jpg", ".jpeg", ".png")):
        path = os.path.join(KNOWN_FACES_DIR, filename)
        name = os.path.splitext(filename)[0]
        try:
            "–°—á–∏—Ç–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –ª–∏—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å"
            embedding = DeepFace.represent(img_path=path, model_name="Facenet", detector_backend="opencv")[0]["embedding"]
            known_embeddings[name] = embedding
            print(f"üîπ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {filename}: {e}")

print(f"üìö –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(known_embeddings)} —ç—Ç–∞–ª–æ–Ω–æ–≤")

"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLO"
model = YOLO("yolov8n.pt")

"–ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∫–∞–º–µ—Ä—É"
cap = cv2.VideoCapture(0)

print("üì∑ –ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ Q –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

while True:
    ret, frame = cap.read()
    if not ret:
        break

    "–î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç YOLO"
    results = model(frame)

    for box in results[0].boxes:
        "–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–º–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        face = frame[y1:y2, x1:x2]

        try:
            "–°—á–∏—Ç–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞"
            embedding = DeepFace.represent(face, model_name="Facenet", detector_backend="opencv")[0]["embedding"]
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            "–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å –±–∞–∑–æ–π"
            for known_name, known_emb in known_embeddings.items():
                distance = cosine(embedding, known_emb)
                if distance < 0.4:
                    name = known_name
                    break

            "–†–∏—Å—É–µ–º —Ä–∞–º–∫—É –∏ –∏–º—è –Ω–∞ –≤–∏–¥–µ–æ"
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

            "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ Django API, –µ—Å–ª–∏ –æ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
            if name != "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω":
                response = requests.post(API_URL, json={"student_name": name})
                if response.status_code == 201:
                    print(f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ API: {name}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}")

        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Ü–∞:", e)

    "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º"
    cv2.imshow("üéì –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", frame)

    "–í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ Q"
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
